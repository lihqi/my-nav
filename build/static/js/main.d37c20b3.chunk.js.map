{"version":3,"sources":["MyNavs/SaveRef.js","MyNavs/MoreContent.js","MyNavs/Navs.js","MyNavs/index.js","App.js","serviceWorker.js","index.js"],"names":["SaveRef","getRef","name","_this","saveRef","node","this","props","children","React","Component","MoreContent","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","show","moreHeight","setState","_this$props","data","heightStr","_this$state","react_default","a","createElement","key","className","ref","onMouseEnter","handler","bind","onMouseLeave","style","lineHeight","top","display","maxHeight","concat","map","item","text","rect","getBoundingClientRect","document","documentElement","height","renderData","renderListItem","Navs","sliceIndex","_this$props$height","_this$props$data","showData","restData","slice","overflow","MoreContent_MoreContent","_this2","_this2$props$data","ulWidth","liWidthCount","some","index","width","preLiWidthCount","nextProps","_this3","debouncedResize","debounce","resizeObserver","ResizeObserver","observe","disconnect","cancel","Nav","SaveRef_SaveRef","Navs_Navs","App","MyNavs_Nav","onClick","toConsumableArray","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d37c20b3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class SaveRef extends React.Component {\r\n    getRef = name => {\r\n        return this[name];\r\n    };\r\n    saveRef = name => {\r\n        return node => {\r\n            if (node) {\r\n                this[name] = node;\r\n            }\r\n        };\r\n    };\r\n    render() {\r\n        return this.props.children(this.saveRef, this.getRef);\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class MoreContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n            moreHeight: 0\r\n        };\r\n    }\r\n    handler() {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n    render() {\r\n        let { data, heightStr, saveRef } = this.props;\r\n        const { show, moreHeight } = this.state;\r\n        return (\r\n            <li\r\n                key={\"more\"}\r\n                className=\"list-item more\"\r\n                ref={saveRef(\"more\")}\r\n                onMouseEnter={this.handler.bind(this)}\r\n                onMouseLeave={this.handler.bind(this)}\r\n            >\r\n                <p\r\n                    style={{\r\n                        lineHeight: heightStr\r\n                    }}\r\n                >\r\n                    更多\r\n                </p>\r\n                <div\r\n                    className=\"more-content\"\r\n                    style={{\r\n                        top: heightStr,\r\n                        display: show && moreHeight ? \"block\" : \"none\",\r\n                        maxHeight: `${moreHeight}px`\r\n                    }}\r\n                >\r\n                    {data.map(item => {\r\n                        return <div key={item.key}>{item.text}</div>;\r\n                    })}\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        const { getRef } = this.props;\r\n        let rect = getRef(\"more\").getBoundingClientRect();\r\n        let moreHeight =\r\n            document.documentElement.getBoundingClientRect().height -\r\n            20 -\r\n            rect.top -\r\n            rect.height;\r\n        this.setState({\r\n            moreHeight\r\n        });\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport debounce from \"lodash/debounce\";\r\nimport MoreContent from \"./MoreContent\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\nconst renderData = (data, saveRef, heightStr) => {\r\n    return data.map(item => renderListItem(item, saveRef, heightStr));\r\n};\r\nconst renderListItem = (item, saveRef, heightStr) => {\r\n    return (\r\n        <li key={item.key} className=\"list-item\" ref={saveRef(\"\" + item.key)}>\r\n            <p\r\n                style={{\r\n                    lineHeight: heightStr\r\n                }}\r\n            >\r\n                {item.text}\r\n            </p>\r\n        </li>\r\n    );\r\n};\r\nexport default class Navs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sliceIndex: null\r\n        };\r\n    }\r\n    render() {\r\n        const { height = 60, data = [], saveRef, getRef } = this.props;\r\n        const { sliceIndex } = this.state;\r\n        let heightStr = null;\r\n        if (height) {\r\n            heightStr = `${height}px`;\r\n        }\r\n        let showData = [];\r\n        let restData = [];\r\n        if (sliceIndex !== null) {\r\n            showData = data.slice(0, sliceIndex);\r\n            restData = data.slice(sliceIndex);\r\n        }\r\n        return (\r\n            <div\r\n                className=\"navs-wrap\"\r\n                style={{\r\n                    height: heightStr\r\n                }}\r\n            >\r\n                <ul\r\n                    ref={saveRef(\"root\")}\r\n                    className=\"clearfix list\"\r\n                    style={{\r\n                        overflow: \"hidden\"\r\n                    }}\r\n                >\r\n                    {sliceIndex === null\r\n                        ? renderData(data, saveRef, heightStr)\r\n                        : renderData(showData, saveRef, heightStr)}\r\n                    {sliceIndex === null ? null : (\r\n                        <MoreContent\r\n                            data={restData}\r\n                            heightStr={heightStr}\r\n                            saveRef={saveRef}\r\n                            getRef={getRef}\r\n                        />\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n    handler() {\r\n        this.setState(\r\n            {\r\n                sliceIndex: null\r\n            },\r\n            () => {\r\n                const { data = [] } = this.props;\r\n                const ulWidth = this.props.getRef(\"root\")[\"offsetWidth\"];\r\n                let liWidthCount = 0;\r\n                data.some((item, index) => {\r\n                    const key = item.key;\r\n                    const width = this.props.getRef(\"\" + key)[\"offsetWidth\"];\r\n                    let preLiWidthCount = liWidthCount;\r\n                    liWidthCount += width;\r\n                    if (liWidthCount > ulWidth) {\r\n                        if (preLiWidthCount + 72 > ulWidth) {\r\n                            this.setState({\r\n                                sliceIndex: index - 1\r\n                            });\r\n                        } else {\r\n                            this.setState({\r\n                                sliceIndex: index\r\n                            });\r\n                        }\r\n                    }\r\n                    return liWidthCount > ulWidth;\r\n                });\r\n            }\r\n        );\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        let { data } = this.props;\r\n        let nextData = nextProps.data;\r\n        if (data !== nextData) {\r\n            this.handler();\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.debouncedResize = debounce(() => {\r\n            this.handler();\r\n        }, 100);\r\n        this.resizeObserver = new ResizeObserver(this.debouncedResize);\r\n        this.resizeObserver.observe(this.props.getRef(\"root\"));\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.resizeObserver) {\r\n            this.resizeObserver.disconnect();\r\n        }\r\n        if (this.debouncedResize && this.debouncedResize.cancel) {\r\n            this.debouncedResize.cancel();\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport SaveRef from \"./SaveRef\";\r\nimport Navs from \"./Navs\";\r\nexport default class Nav extends Component {\r\n    render() {\r\n        let { data } = this.props;\r\n        return (\r\n            <SaveRef>\r\n                {(saveRef, getRef) => (\r\n                    <Navs\r\n                        saveRef={saveRef}\r\n                        getRef={getRef}\r\n                        height={60}\r\n                        data={data}\r\n                    />\r\n                )}\r\n            </SaveRef>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Nav from \"./MyNavs\";\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [\n                {\n                    key: 1,\n                    text: \"沃尔夫赛赛分\"\n                },\n                {\n                    key: 2,\n                    text: \"问赛风的\"\n                },\n                {\n                    key: 3,\n                    text: \"而大夫\"\n                },\n                {\n                    key: 4,\n                    text: \"郭彬彬\"\n                },\n                {\n                    key: 5,\n                    text: \"对方地方\"\n                },\n                {\n                    key: 6,\n                    text: \"塞复赛\"\n                },\n                {\n                    key: 7,\n                    text: \"赛风森的\"\n                }\n            ]\n        };\n    }\n    render() {\n        return (\n            <div>\n                <Nav data={this.state.data} />\n                <div onClick={this.handler.bind(this)}>click</div>\n            </div>\n        );\n    }\n    handler() {\n        this.setState({\n            data: [\n                ...this.state.data,\n                {\n                    key: Math.random(),\n                    text: \"我问赛风赛\"\n                }\n            ]\n        });\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}